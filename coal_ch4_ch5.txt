Example 1:
INCLUDE Irvine32.inc 
.data
intArray WORD 100h, 200h, 300h, 400h, 500h
.code 
main PROC
mov esi,0
mov eax,0
mov ecx,LENGTHOF intArray
L1:
mov ax, intArray[esi]
add esi, TYPE intArray
call DumpRegs
loop L1
main ENDP
END main
---------------------------------------------------------
example 2:
INCLUDE Irvine32.inc
.code 
main PROC
mov eax, 0
mov ebx, 0
mov ecx, 5
L1:
inc eax
mov edx, ecx
call dumpregs
mov ecx, 10
L2:
inc ebx
call dumpregs
loop L2
mov ecx, edx
loop L1
main ENDP
END main
----------------------------------------------
example 3 : sum of array
INCLUDE Irvine32.inc
.data
intarray DWORD 10000h,20000h,30000h,40000h
.code
main PROC
mov esi,OFFSET intarray 
mov ecx,LENGTHOF intarray 
mov eax,0 
L1: 
add eax,[esi] 
add esi,TYPE intarray 
call dumpregs
loop L1 

main ENDP
END main
-------------------------------------------------
example #4 : copy a string
INCLUDE Irvine32.inc
.data
source BYTE "This is the source string",0
target BYTE SIZEOF source DUP(0)
.code
main PROC
mov esi,0 
mov ecx,SIZEOF source 
L1:
mov al,source[esi]  
mov target[esi],al
inc esi
call dumpregs
loop L1 

main ENDP
END main
----------------------------------------------------------
example 5 : advanced concept
INCLUDE Irvine32.inc
.data
COUNT = 4
arrayD SDWORD 12345678h,1A4B2000h, 3434h, 7AB9h
prompt BYTE "Enter a 32-bit signed integer: ", 0
.code
main PROC
; Display an array using DumpMem.
mov esi, OFFSET arrayD ; starting OFFSET
mov ebx, TYPE arrayD ; doubleword = 4 bytes
mov ecx, LENGTHOF arrayD ; number of units in arrayD
call DumpMem  
call DumpRegs
call Crlf
mov ecx, COUNT
L1:
mov edx, OFFSET prompt
call WriteString
call ReadInt ; input integer into EAX
call Crlf

call WriteInt ; display in signed decimal
call Crlf
call WriteHex ; display in hexadecimal
call Crlf
call WriteBin ; display in binary
call Crlf
call Crlf
Loop L1 ; repeat the loop
exit
main ENDP
 END main
------------------------------------------------
example 6 : fibonacci
INCLUDE Irvine32.inc
.data
.code
main PROC

mov eax ,0
mov ebx,0
call writeint
mov edx,1
call writeint
mov ecx,8
L1:
mov eax,0
add eax,ebx
add eax,edx
mov ebx,edx
mov edx,eax
call writeint
Loop L1

exit
main ENDP
END main
--------------------------------------lab 6------------------------------------------------------------------------------------------
Q2:
sorting :
INCLUDE Irvine32.inc
.data
array1 DWORD 8h, 5h, 1h, 2h, 6h
i DWORD 0
temp DWORD ?
.code
main PROC
mov ecx, 4
l1:
mov temp, ecx
mov eax, 0
mov ebx, 0
sub ecx, i
mov esi, 0
mov edi, 1
l2:
mov eax, array1[esi*TYPE array1]
mov ebx, array1[edi*TYPE array1]
cmp eax, ebx
JG exchange
JLE cont
exchange:
mov eax, array1[esi*TYPE array1]
mov ebx, array1[edi*TYPE array1]
xchg eax, array1[edi*TYPE array1]
xchg ebx, array1[esi*TYPE array1]
cont:
inc esi
inc edi
cmp ecx, 0
JLE outsideinner
loop l2
outsideinner:
mov ecx, temp
inc i
loop l1
mov edi, 0
mov ecx, LENGTHOF array1
mov esi, 0
l3:
mov eax, array1[esi*TYPE array1]
inc esi
call writedec
call crlf
loop l3
exit
main ENDP
END main
Q3:
a) rtri
INCLUDE Irvine32.inc
.data
val1 byte '1',0
j dword ?
.code
main PROC
mov j,1
mov ecx,4
outer:
mov ebx,ecx
mov ecx,j
inner:
mov al,val1
call writechar
Loop inner
mov ecx,ebx
inc j
call Crlf
Loop outer
call DumpRegs
exit
main ENDP
END main
b)inverted rtri
INCLUDE Irvine32.inc
.data
val1 byte '1 ',0
i dword ?
.code
main PROC
mov i,4
mov ecx,4
outer:
mov ebx,ecx
inner:
mov al,val1
call WriteChar
Loop inner
mov ecx,ebx
dec i
call Crlf
Loop outer
call DumpRegs
exit
main ENDP
END main
----------------------------------------------------
Q6:reverse array
INCLUDE Irvine32.inc
.data
array byte 1,2,4,8
.code
main PROC
mov ecx,(lengthof array/2)
mov esi,(lengthof array-1)
mov edx,0
L1:
mov al,array[esi]
mov bl,array[edx]
mov array[edx],al
mov array[esi],bl
dec esi
inc edx
loop L1
mov ecx,(lengthof array)
mov edx,0
mov eax,0
L2:
mov al,array[edx]
call WriteDec
inc edx
Loop L2
call DumpRegs
exit
main ENDP
END main
------------------------------------------------------
Q5 : copy array 
INCLUDE Irvine32.inc
.data
source BYTE 'g','o','k','u','s','o','n',0
target BYTE LENGTHOF source DUP(?),0
.code
main PROC
mov ecx,lengthof source
L1:
mov al,source[ecx-1]
mov target[ecx-1],al
loop L1
mov edx,offset target
call WriteString
call DumpRegs
exit
main ENDP
END main
----------------------------------------------
Q4:user input
INCLUDE Irvine32.inc
.data
sum dword 0h
AnnualSalary DWORD 5 DUP(?)
s1 BYTE "Enter a Employee Id: ", 0
s2 BYTE "Enter a Employee name: ", 0
s3 BYTE "Enter Year of Birth :  ", 0
s4 BYTE "Enter Annual Salary  : ", 0
s5 BYTE "Total Annual Salary  :", 0
id DWORD 5 DUP(?)
myname BYTE 20 DUP(?)
Byear DWORD 4 DUP(?)
salary DWORD 4 DUP(?)
.code
main PROC
mov ebx,0
mov ecx, 5
mov edi ,ecx
L1:
mov edx, OFFSET s1
call WriteString
call ReadHex
mov id[ebx],eax
mov edx, OFFSET s2
call WriteString
mov edx,offset myname
mov ecx,sizeof myname
call Readstring
mov edx, OFFSET s3
call WriteString
call ReadHex
mov Byear[ebx],eax
mov edx, OFFSET s4
call WriteString
call ReadHex
mov salary[ebx],eax
add sum ,eax
inc ebx
mov ecx ,edi
dec edi
loop L1
call crlf
mov edx, OFFSET s5
call WriteString
mov eax,sum
call writedec
exit
main ENDP
END main
-------------------------------------------------------------------------------------------------------------------------------------------




------------------------------------------------------
example 7: nested procedure call
INCLUDE Irvine32.inc
.data
v1 dword 5
v2 dword 6
.code
main PROC
call addtwo
call dumpregs
call writeint
call crlf
exit
main ENDP
addtwo PROC
mov eax,v1
mov ebx,v2
add eax,v2

call addtwo1
ret
addtwo ENDP
addtwo1 PROC
mov ecx,v1
mov edx,v2
mov ecx,v2
call writeint
ret
addtwo1 ENDP
END main


-------------------------------------------
example 8 : sum of array
INCLUDE Irvine32.inc
.data
arr dword 1h,2h,3h,4h,5h,6h
sum dword ?
.code
main PROC

call arrsum
mov sum,eax
call writeint
exit
main ENDP
arrsum PROC
mov esi,offset arr
mov ecx,lengthof arr
mov eax,0
L1:
add eax,[esi]
add esi,type arr
loop L1
ret
arrsum ENDP


END main


--------------------------------------------
example 9 :
INCLUDE Irvine32.inc 
.data 
Dash BYTE " - ", 0 
.code 
main PROC
mov ecx, 255 
mov eax,1 
mov edx, OFFSET Dash 
L1: 
call WriteDec ; EAX is a counter 
call WriteString ; EDX points to string 
call WriteChar ; AL is the character 
call Crlf 
inc al ; next character 
Loop L1 
exit
main ENDP
END main
-----------------------------------------------
example 10 :
 INCLUDE Irvine32.inc 
.data 
str1 BYTE "Sample string in color", 0dh, 0ah, 0 
.code 
main PROC 
mov eax, yellow + (blue*16) 
call SetTextColor 
mov edx, OFFSET str1 
call WriteString 
call DumpRegs 
exit 
main ENDP 
END main
-----------------------------------------------------
example 11: randomize,call random numbers
 INCLUDE Irvine32.inc 
.code
main PROC
call Randomize
mov ecx,2
L1: 
call Random32

call writeint
 ; use or display random value in EAX here...
 
 
loop L1
exit 
main ENDP 
END main
----------------------------------------------------------
example 12 : random range
produce random number within the range
 INCLUDE Irvine32.inc 
 .data
 .data
randVal DWORD ?
.code
main PROC
mov eax,5000
call RandomRange
mov randVal,eax
call writeint
exit 
main ENDP 
END main
-----------------------------------------------------------
example 13:
read character

 INCLUDE Irvine32.inc 
 .data
char BYTE ?
.code
main PROC
call ReadChar
mov char,al
call writechar;
main ENDP 
END main
--------------------------------------------------
readdec:
INCLUDE Irvine32.inc 
 .data
intVal DWORD ?
.code
main PROC
call ReadDec
mov intVal,eax
main ENDP 
END main
-----------------------------------------------
readhex :
.data
hexVal DWORD ?
.code
call ReadHex
mov hexVal,eax
----------------------------------------------------
readint :
.data
intVal SDWORD ?
.code
call ReadInt
mov intVal,eax
--------------------------------------------------
readstring : 
  INCLUDE Irvine32.inc 
 .data
buffer BYTE 21 DUP(0) ; input buffer
byteCount DWORD ?
.code
main PROC
mov edx,OFFSET buffer ; point to the buffer
mov ecx,SIZEOF buffer ; specify max characters
call ReadString ; input the string
mov byteCount,eax
main ENDP 
END main
-----------------------------------------------
str_length:
  INCLUDE Irvine32.inc 
 .data
buffer BYTE "abcde",0
bufLength DWORD ?
.code
main PROC
mov edx,OFFSET buffer ; point to string
call Str_length ; EAX = 5

mov bufLength,eax
call dumpregs

main ENDP 
END main
-------------------------------------------------
wriebin :
in binary form
 INCLUDE Irvine32.inc 
 .data

.code
main PROC
mov eax,12346AF9h
call WriteBin

main ENDP 
END main
----------------------------------------------------------------
writechar,writedec,writehex,writeint,writestring :::
 INCLUDE Irvine32.inc 
 .data
 prompt BYTE "Enter your name: ",0

.code
main PROC
mov al,'A'
call WriteChar
call crlf
mov eax,295
call WriteDec
call crlf
mov ebx,7FFFh
call WriteHex
call crlf
mov ecx,216543
call WriteInt
call crlf
mov edx,OFFSET prompt
call WriteString


main ENDP 
END main
--------------------------------------------------------------
Taking user input:
  
 INCLUDE Irvine32.inc 
 .data
buffer BYTE 21 DUP(0) ; input buffer
prompt BYTE "Enter your name: ",0
prompt2 BYTE "your name is : ",0
byteCount DWORD ?
.code
main PROC
mov edx,OFFSET prompt
call WriteString
mov edx,OFFSET buffer ; point to the buffer
mov ecx,SIZEOF buffer ; specify max characters
call ReadString ; input the string
mov edx,OFFSET prompt2
call WriteString


mov edx,OFFSET buffer
call WriteString
mov byteCount,eax
main ENDP 
END main
 




main ENDP 
END main

---------------------------------------------------------------------------------
example 12 : big endian to liitle endian
INCLUDE Irvine32.inc 
.data
bigEndian BYTE 12h,34h,56h,78h
littleEndian DWORD ?

.code
main PROC
mov al, [bigEndian+3] ; this would swap 78h and 12h

mov ah, [bigEndian]

mov [bigEndian], al

mov [bigEndian+3], ah

mov al, [bigEndian+2] ;This would swap 56h and 34h

mov ah, [bigEndian+1]

mov [bigEndian+1], al

mov [bigEndian+2], ah

mov eax, DWORD PTR bigEndian ; This would move reverse ordered bytes

mov littleEndian, eax ;This would move reverse ordered bytes
call dumpregs
main ENDP
END main
------------------------------------------------------------------------
example 13 :
Write a program with a loop and indexed addressing that exchanges every pair of values in an
array with an even number of elements. Therefore, item i will exchange with item i+1, and item
i+2 will exchange with item i+3, and so on

INCLUDE Irvine32.inc 
.data
array dword 1,2,3,4,5,6,7,8

.code
main PROC
mov esi, OFFSET array
mov ecx, LENGTHOF array -1
myLoop:

  MOV eax,[esi]
  XCHG eax,[esi+4]
  MOV [esi],eax

add esi, TYPE array
add esi, TYPE array
call writedec
call dumpregs

loop myLoop


main ENDP
END main
---------------------------------------------------------------------------------------------
example 14 : 
Write a program with a loop and indexed addressing that calculates the sum of all the gaps
between successive array elements. The array elements are doublewords, sequenced in nondecreasing order. So, for example, the array {0, 2, 5, 9, 10} has gaps of 2, 3, 4, and 1, whose sum
equals 10.

INCLUDE Irvine32.inc 
.data
array DWORD 0,2,5,9,10
result DWORD 0

.code
main PROC


  mov ecx, LENGTHOF array
  mov ESI, OFFSET array

  L1:
 MOV EAX,[ESI]
 MOV EBX,[ESI+4]
 SUB EBX,EAX
 ADD result,EBX
 ADD ESI, TYPE array
 
  Loop L1
  call writedec


main ENDP
END main
----------------------------------------------------------------------------------------------------------
example 16 :
Write a program that uses a loop to copy all the elements from an unsigned Word (16-bit) array
into an unsigned doubleword (32-bit) array. 

INCLUDE Irvine32.inc 
.data
array WORD 0,2,5,9,10
newArray DWORD LENGTHOF array DUP(?)
.code
main PROC

  mov ecx, LENGTHOF array
  mov ESI, OFFSET array
  mov EDI, OFFSET newArray

  L1:
 MOV EAX,0
 MOV AX,[ESI]
 MOV [EDI], EAX
 ADD ESI, TYPE array
 ADD EDI, TYPE newArray
  Loop L1


main ENDP
END main
-----------------------------------------------------------------------------
example 16 : array reverese
INCLUDE Irvine32.inc 
.data
decimalArray DWORD 1,2,3,4,5,6,7,8
.code
main PROC

 MOV ESI, OFFSET decimalArray
 MOV EDI, OFFSET decimalArray
 mov ecx, LENGTHOF decimalArray-1
L1:
 ADD EDI, TYPE decimalArray
 LOOP L1

 mov ecx, LENGTHOF decimalArray
L2:
 MOV EAX, [ESI]
 MOV EBX, [EDI]
 XCHG EAX, EBX
 MOV [ESI], EAX
 MOV [EDI], EBX

 ADD ESI, TYPE decimalArray
 SUB EDI, TYPE decimalArray
 
 DEC ECX
 call writedec
 

 LOOP L2
 


main ENDP
END main
---------------------------------------------------------------------------------------------
example 17 : string reverse
INCLUDE Irvine32.inc 
.data
    source BYTE "This is the source string",0
    target BYTE SIZEOF source DUP(?)

    .code
    main PROC
        mov esi,0
        mov edi,LENGTHOF source - 1
        mov ecx,SIZEOF source

    L1:
        mov eax, 0
        mov al,source[esi]
        mov target[edi],al
        inc esi
        dec edi
        call writestring
        loop L1
        


main ENDP
END main
-----------------------------------------------------------------------------
example 18 : shift array elements
.data
array DWORD 10,20,30,40
arrayType DWORD TYPE array
newArray DWORD LENGTHOF array DUP(?)
lastElement DWORD ?

.code
main PROC
  
    ;Get first element address in ESI
    MOV ESI, OFFSET array

    ;Get address of next element in EDI
    MOV EDI, OFFSET newArray
    ADD EDI, TYPE newArray

    ;set loop count into ecx
    mov ECX, LENGTHOF array

L2:
    MOV EAX, [ESI]
    MOV [EDI], EAX

    ADD ESI, TYPE array
    ADD EDI, TYPE array

    LOOP L2

    ;set last element from array in newArray first position
    MOV EDI,OFFSET newArray
    MOV EAX, [ESI]
    MOV [EDI], EAX
main ENDP
END main
-------------------------------------------------------------------------------

Write a program that displays the same string in four different colors, using a loop. Call the SetTextColor procedure from the book’s link library. Any colors may be chosen, but you may find
it easiest to change the foreground color

INCLUDE Irvine32.inc

.data
str1 BYTE "This is a coloured string.",0
.code
main PROC

    MOV ECX, 4
    MOV EAX, green + (white*16)
    MOV EDX, OFFSET str1

    L1:

        call SetTextColor
        call WriteString
        call Crlf
        INC EAX

    LOOP L1

    call WaitMsg
    exit
main ENDP

END main
-----------------------------------------------------------------------------
example : linking array items
INCLUDE Irvine32.inc

.data
start DWORD 1
chars BYTE 'H','A','C','E','B','D','F','G'
links DWORD 0,4,5,6,2,3,7,0
linksType BYTE TYPE links
newArray BYTE LENGTHOF chars DUP(?)

.code
main PROC

    MOV ECX, LENGTHOF newArray
    MOV EDI, OFFSET newArray

    L1:
    ;Get char array element accoridng to start
        MOV ESI, OFFSET chars
        ADD ESI, start
        MOV AL, [ESI]
    ;Move element to new array
        MOV [EDI], AL

    ;Move start to element in the links array
        MOV EDX, OFFSET links
        MOV EAX, start
        MUL linksType
        MOV start, EAX
        ADD EDX, start
    ;Replace start      
        MOV EAX, [EDX]
        MOV start, EAX

        INC EDI
    LOOP L1

    call WaitMsg
    exit
main ENDP

END main
-------------------------------------------------------------------------------
example : 
Write a program that clears the screen, locates the cursor near the middle of the screen, prompts
the user for two integers, adds the integers, and displays their sum

 INCLUDE Irvine32.inc

.data
prompt BYTE "Enter a 32-bit signed integer:",0
resultMsg BYTE "Sum of 2 integers is:",0
int1 DWORD ?
int2 DWORD ?
sum DWORD ?

.code
main PROC
    call Clrscr

    ;Move cursor to mid screen
    MOV DH, 13    ;y-coordinate range 0-24
    MOV DL, 40    ;x-coordinate range 0-79
    CALL GoToXY    ;locate cursor

    MOV EDX, OFFSET prompt    ;Display prompt
    CALL WriteString
    CALL ReadInt    ;Read integer
    MOV int1,EAX

    CALL WriteString
    CALL ReadInt    ;Read integer
    MOV int2,EAX

    ;calculate sum
    MOV EAX, int1
    ADD EAX, int2
    MOV sum, EAX

    ;display sum
    MOV EDX, OFFSET resultMsg
    call WriteString
    MOV EAX, sum
    call WriteInt

    call Crlf
    call WaitMsg
    exit
main ENDP

END main
---------------------------------------------------------------------------------
example :
The RandomRange procedure from the Irvine32 library generates a pseudorandom integer between
0 and N  1. Your task is to create an improved version that generates an integer between M and
N1. Let the caller pass M in EBX and N in EAX. If we call the procedure BetterRandomRange, the
following code is a sample test:
mov ebx,-300 ; lower bound
mov eax,100 ; upper bound
call BetterRandomRange
Write a short test program that calls BetterRandomRange from a loop that repeats 50 times.
Display each randomly generated value.
  INCLUDE Irvine32.inc

.data

.code
    main PROC
        call Clrscr
        mov eax, -300
        mov ebx, 100
        mov ecx, 50

        L1:
            push eax            ; doesn't change range
            push ebx

            call BetterRandomRange

            pop ebx
            pop eax
        Loop L1

        call WaitMsg
        exit
    main ENDP

    BetterRandomRange PROC
        sub ebx, eax        ;mov 400 to ebx
        xchg ebx, eax        ;random works with eax
        call RandomRange    ; generate random int
        neg ebx              
        sub eax, ebx        ;sub 300 from eax to define range
        call WriteInt        ; write signed decimal
        call Crlf
        ret
    BetterRandomRange ENDP

END main
-------------------------------------------------------------------------
example :
Create a procedure that generates a random string of length L, containing all capital letters.
When calling the procedure, pass the value of L in EAX, and pass a pointer to an array of byte
that will hold the random string. Write a test program that calls your procedure 20 times and displays the strings in the console window. 

INCLUDE Irvine32.inc
strLen=10
.data
arr BYTE strLen DUP(?)

.code
    main PROC
        call Clrscr
        mov esi, offset arr
        mov ecx, 20
        L1:
            call GenerateRandomString
        Loop L1
        call WaitMsg
        exit
    main ENDP

    GenerateRandomString PROC USES ecx  
        mov ecx, lengthOf arr
        L2:
            mov eax, 26
            call RandomRange
            add eax, 65
            mov [esi], eax
            call WriteChar        ; write character
        loop L2      
        call Crlf
        ret
    GenerateRandomString ENDP

END main 
---------------------------------------------------------------------------------------------------
Write a program that displays a single character at 100 random screen locations, using a timing
delay of 100 milliseconds. Hint: Use the GetMaxXY procedure to determine the current size of
the console window
  
    INCLUDE Irvine32.inc

.data
rows WORD ?
cols WORD ?


.code
    main PROC
        call Clrscr
        mov ecx, 100
        L1:
            call GetMaxXY
            mov rows, ax
            mov cols, dx
          
            movzx eax, rows
            call RandomRange
            mov dh, al

            movzx eax, cols
            call RandomRange
            mov dl, al

            call Gotoxy        ; locate cursor

            mov al,'H'
            call WriteChar

            mov eax,100
            call Delay

        Loop L1

        call WaitMsg
        exit
    main ENDP

END main
--------------------------------------------------------------------------------
example :clor matrix
Write a program that displays a single character in all possible combinations of foreground and
background colors (16  16  256). The colors are numbered from 0 to 15, so you can use a
nested loop to generate all possible combinations

INCLUDE Irvine32.inc

.data
count DWORD ?

.code
main PROC

    mov eax, 0 + (0 * 16)
    mov ecx, 16
    L1:
        mov count, ecx
        push eax
        mov ecx, 16
        L2:
            call SetTextColor
            push eax          
            mov al,'H'
            call WriteChar
            pop eax
            inc eax
        LOOP L2
        call crlf
        pop eax
        add eax, 16
        mov ecx, count
    LOOP L1

    call crlf
    call WaitMsg
    exit
main ENDP

END main
--------------------------------------------------------------------------------
example : recusion
Direct recursion is the term we use when a procedure calls itself. Of course, you never want to
let a procedure keep calling itself forever, because the runtime stack would fill up. Instead, you
must limit the recursion in some way. Write a program that calls a recursive procedure. Inside
this procedure, add 1 to a counter so you can verify the number of times it executes. Run your
program with a debugger, and at the end of the program, check the counter’s value. Put a number in ECX that specifies the number of times you want to allow the recursion to continue. Using
only the LOOP instruction (and no other conditional statements from later chapters), find a way
for the recursive procedure to call itself a fixed number of times

  INCLUDE Irvine32.inc

.data
count DWORD ?

.code
    main PROC
        mov count, 0
        mov ecx, 10
        call generateRecursion

        exit
    main ENDP

    generateRecursion PROC
        inc count
        cmp count, ecx
        jz quit
        call generateRecursion
        quit:
        ret
    generateRecursion ENDP

END main
-------------------------------------------------------------------------
example : k multiples
In a byte array of size N, write a procedure that finds all multiples of K that are less than N. Initialize the array to all zeros at the beginning of the program, and then whenever a multiple is
found, set the corresponding array element to 1. Your procedure must save and restore any registers it modifies. Call your procedure twice, with K = 2, and again with K = 3. Let N equal to 50.
Run your program in the debugger and verify that the array values were set correctly. Note: This
procedure can be a useful tool when finding prime integers. An efficient algorithm for finding
prime numbers is known as the Sieve of Eratosthenes. You will be able to implement this algorithm when conditional statements are covered in Chapter 6.


  INCLUDE Irvine32.inc

N = 50
.data
array BYTE N DUP(0)
K DWORD ?
.code
main PROC

    mov K, 2
    call multiplesOfK

    ;    re-initialize the array to zero
    MOV ECX, N
    L2:
        MOV BYTE PTR [ESI], 0
        ADD ESI, TYPE array
    LOOP L2
    mov K, 3
    call multiplesOfK

INVOKE ExitProcess,0
main ENDP

multiplesOfK PROC
    ; save all registers
    push ECX
    push ESI
    push EBX
    push EDX

    MOV ESI, OFFSET array
    MOV ECX, N        ; loop thorugh array
    MOV EDX, 1        ; compare array index 1 to 50
    MOV EBX, K        ; multiple of K
    L1:
        CMP EBX, EDX
        jne next

        ; multiple found
        MOV BYTE PTR [ESI], 1
        ADD EBX, K    ; next multiple of K

        next:
        INC EDX
        ADD ESI, TYPE array
    Loop L1

    ; retrieve all registers
    pop EDX
    pop EBX
    pop ESI
    pop ECX
    ret
multiplesOfK ENDP
END main

END main
------------------------------------------*-----------------------------------------------------------------------
example : maual sorting
INCLUDE Irvine32.inc
.data
array byte 61h,42h,11h,52h,25h
array2 byte 5 dup(?)
.code
main PROC
mov al,[array+2]
mov array2,al
mov al,[array+4]
mov [array2+1],al
mov al,[array+1]
mov [array2+2],al
mov al,[array+3]
mov al,array
mov [array2+4],al
movzx eax,[array2]
movzx ebx,[array2+1]
movzx ecx,[array2+2]
movzx edx,[array2+3]
movzx esi,[array2+4]




call DumpRegs
exit
main ENDP
END main
------------------------------------------------------------------------------------
example : manual reverse
INCLUDE Irvine32.inc

.data
array1 BYTE 10, 20, 30, 40
array2 BYTE 4 DUP (?)

.code
main PROC
mov al, [array1+3]
mov array2, al
mov al, [array1+2]
mov array2+1, al
mov al, [array1+1]
mov array2+2, al
mov al, [array1]
mov array2+3, al

call Dumpregs
exit 
main ENDP
END main
------------------------------------------------------------------------------------------
---------------------------------------------------------lab6---------------------------------------------------------------------
Q6 : reverse
INCLUDE Irvine32.inc
.data
array byte 1,2,4,8
.code
main PROC
mov ecx,(lengthof array/2)
mov esi,(lengthof array-1)
mov edx,0
L1:
mov al,array[esi]
mov bl,array[edx]
mov array[edx],al
mov array[esi],bl
dec esi
inc edx
loop L1
mov ecx,(lengthof array)
mov edx,0
mov eax,0
L2:
mov al,array[edx]
call WriteDec
inc edx
Loop L2
call DumpRegs
exit
main ENDP
END main
Q5: copy string
INCLUDE Irvine32.inc
.data
source BYTE 'g','o','k','u','s','o','n',0
target BYTE LENGTHOF source DUP(?),0
.code
main PROC
mov ecx,lengthof source
L1:
mov al,source[ecx-1]
mov target[ecx-1],al
loop L1
mov edx,offset target
call WriteString
call DumpRegs
exit
main ENDP
END main
Q4: user input
INCLUDE Irvine32.inc
.data
sum dword 0h
AnnualSalary DWORD 5 DUP(?)
s1 BYTE "Enter a Employee Id: ", 0
s2 BYTE "Enter a Employee name: ", 0
s3 BYTE "Enter Year of Birth :  ", 0
s4 BYTE "Enter Annual Salary  : ", 0
s5 BYTE "Total Annual Salary  :", 0
id DWORD 5 DUP(?)
myname BYTE 20 DUP(?)
Byear DWORD 4 DUP(?)
salary DWORD 4 DUP(?)
.code
main PROC
mov ebx,0
mov ecx, 5
mov edi ,ecx
L1:
mov edx, OFFSET s1
call WriteString
call ReadHex
mov id[ebx],eax
mov edx, OFFSET s2
call WriteString
mov edx,offset myname
mov ecx,sizeof myname
call Readstring
mov edx, OFFSET s3
call WriteString
call ReadHex
mov Byear[ebx],eax
mov edx, OFFSET s4
call WriteString
call ReadHex
mov salary[ebx],eax
add sum ,eax
inc ebx
mov ecx ,edi
dec edi
loop L1
call crlf
mov edx, OFFSET s5
call WriteString
mov eax,sum
call writedec
exit
main ENDP
END main
Q3 :
a) r tri
INCLUDE Irvine32.inc
.data
val1 byte '1',0
j dword ?
.code
main PROC
mov j,1
mov ecx,4
outer:
mov ebx,ecx
mov ecx,j
inner:
mov al,val1
call writechar
Loop inner
mov ecx,ebx
inc j
call Crlf
Loop outer
call DumpRegs
exit
main ENDP
END main
b) inverted rtri
INCLUDE Irvine32.inc
.data
val1 byte '1 ',0
i dword ?
.code
main PROC
mov i,4
mov ecx,4
outer:
mov ebx,ecx
inner:
mov al,val1
call WriteChar
Loop inner
mov ecx,ebx
dec i
call Crlf
Loop outer
call DumpRegs
exit
main ENDP
END main
Q2 : sort 
INCLUDE Irvine32.inc
.data
array1 DWORD 8h, 5h, 1h, 2h, 6h
i DWORD 0
temp DWORD ?
.code
main PROC
mov ecx, 4
l1:
mov temp, ecx
mov eax, 0
mov ebx, 0
sub ecx, i
mov esi, 0
mov edi, 1
l2:
mov eax, array1[esi*TYPE array1]
mov ebx, array1[edi*TYPE array1]
cmp eax, ebx
JG exchange
JLE cont
exchange:
mov eax, array1[esi*TYPE array1]
mov ebx, array1[edi*TYPE array1]
xchg eax, array1[edi*TYPE array1]
xchg ebx, array1[esi*TYPE array1]
cont:
inc esi
inc edi
cmp ecx, 0
JLE outsideinner
loop l2
outsideinner:
mov ecx, temp
inc i
loop l1
mov edi, 0
mov ecx, LENGTHOF array1
mov esi, 0
l3:
mov eax, array1[esi*TYPE array1]
inc esi
call writedec
call crlf
loop l3
exit
main ENDP
END main
----------------------------------------------------------------------------------------------------------
